// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/error_handler.go
//
// Generated by this command:
//
//	mockgen -source=internal/api/error_handler.go -destination=internal/api/mock/error_handler_mock.go
//

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPErrorHandler is a mock of HTTPErrorHandler interface.
type MockHTTPErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPErrorHandlerMockRecorder
}

// MockHTTPErrorHandlerMockRecorder is the mock recorder for MockHTTPErrorHandler.
type MockHTTPErrorHandlerMockRecorder struct {
	mock *MockHTTPErrorHandler
}

// NewMockHTTPErrorHandler creates a new mock instance.
func NewMockHTTPErrorHandler(ctrl *gomock.Controller) *MockHTTPErrorHandler {
	mock := &MockHTTPErrorHandler{ctrl: ctrl}
	mock.recorder = &MockHTTPErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPErrorHandler) EXPECT() *MockHTTPErrorHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockHTTPErrorHandler) Handle(err error) (int, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", err)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockHTTPErrorHandlerMockRecorder) Handle(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockHTTPErrorHandler)(nil).Handle), err)
}
