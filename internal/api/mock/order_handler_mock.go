// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/order_handler.go
//
// Generated by this command:
//
//	mockgen -source=internal/api/order_handler.go -destination=internal/api/mock/order_handler_mock.go
//

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	v4 "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderHandler is a mock of OrderHandler interface.
type MockOrderHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOrderHandlerMockRecorder
}

// MockOrderHandlerMockRecorder is the mock recorder for MockOrderHandler.
type MockOrderHandlerMockRecorder struct {
	mock *MockOrderHandler
}

// NewMockOrderHandler creates a new mock instance.
func NewMockOrderHandler(ctrl *gomock.Controller) *MockOrderHandler {
	mock := &MockOrderHandler{ctrl: ctrl}
	mock.recorder = &MockOrderHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderHandler) EXPECT() *MockOrderHandlerMockRecorder {
	return m.recorder
}

// DeleteByBotId mocks base method.
func (m *MockOrderHandler) DeleteByBotId(c v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByBotId", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByBotId indicates an expected call of DeleteByBotId.
func (mr *MockOrderHandlerMockRecorder) DeleteByBotId(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByBotId", reflect.TypeOf((*MockOrderHandler)(nil).DeleteByBotId), c)
}

// GetByBotId mocks base method.
func (m *MockOrderHandler) GetByBotId(c v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBotId", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByBotId indicates an expected call of GetByBotId.
func (mr *MockOrderHandlerMockRecorder) GetByBotId(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBotId", reflect.TypeOf((*MockOrderHandler)(nil).GetByBotId), c)
}

// HandleRoutes mocks base method.
func (m *MockOrderHandler) HandleRoutes(e *v4.Echo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRoutes", e)
}

// HandleRoutes indicates an expected call of HandleRoutes.
func (mr *MockOrderHandlerMockRecorder) HandleRoutes(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoutes", reflect.TypeOf((*MockOrderHandler)(nil).HandleRoutes), e)
}
