// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/position_handler.go
//
// Generated by this command:
//
//	mockgen -source=internal/api/position_handler.go -destination=internal/api/mock/position_handler_mock.go
//

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockPositionHandler is a mock of PositionHandler interface.
type MockPositionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPositionHandlerMockRecorder
}

// MockPositionHandlerMockRecorder is the mock recorder for MockPositionHandler.
type MockPositionHandlerMockRecorder struct {
	mock *MockPositionHandler
}

// NewMockPositionHandler creates a new mock instance.
func NewMockPositionHandler(ctrl *gomock.Controller) *MockPositionHandler {
	mock := &MockPositionHandler{ctrl: ctrl}
	mock.recorder = &MockPositionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPositionHandler) EXPECT() *MockPositionHandlerMockRecorder {
	return m.recorder
}

// DeleteByBotId mocks base method.
func (m *MockPositionHandler) DeleteByBotId(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByBotId", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByBotId indicates an expected call of DeleteByBotId.
func (mr *MockPositionHandlerMockRecorder) DeleteByBotId(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByBotId", reflect.TypeOf((*MockPositionHandler)(nil).DeleteByBotId), c)
}

// GetByBotId mocks base method.
func (m *MockPositionHandler) GetByBotId(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBotId", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetByBotId indicates an expected call of GetByBotId.
func (mr *MockPositionHandlerMockRecorder) GetByBotId(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBotId", reflect.TypeOf((*MockPositionHandler)(nil).GetByBotId), c)
}

// HandleRoutes mocks base method.
func (m *MockPositionHandler) HandleRoutes(e *echo.Echo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleRoutes", e)
}

// HandleRoutes indicates an expected call of HandleRoutes.
func (mr *MockPositionHandlerMockRecorder) HandleRoutes(e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoutes", reflect.TypeOf((*MockPositionHandler)(nil).HandleRoutes), e)
}
