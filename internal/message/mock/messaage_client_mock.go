// Code generated by MockGen. DO NOT EDIT.
// Source: internal/message/messaage_client.go
//
// Generated by this command:
//
//	mockgen -source=internal/message/messaage_client.go -destination=internal/message/mock/messaage_client_mock.go
//

// Package mock_message is a generated GoMock package.
package mock_message

import (
	reflect "reflect"

	amqp091 "github.com/rabbitmq/amqp091-go"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageQueueClient is a mock of MessageQueueClient interface.
type MockMessageQueueClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessageQueueClientMockRecorder
}

// MockMessageQueueClientMockRecorder is the mock recorder for MockMessageQueueClient.
type MockMessageQueueClientMockRecorder struct {
	mock *MockMessageQueueClient
}

// NewMockMessageQueueClient creates a new mock instance.
func NewMockMessageQueueClient(ctrl *gomock.Controller) *MockMessageQueueClient {
	mock := &MockMessageQueueClient{ctrl: ctrl}
	mock.recorder = &MockMessageQueueClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageQueueClient) EXPECT() *MockMessageQueueClientMockRecorder {
	return m.recorder
}

// Done mocks base method.
func (m *MockMessageQueueClient) Done() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done")
}

// Done indicates an expected call of Done.
func (mr *MockMessageQueueClientMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockMessageQueueClient)(nil).Done))
}

// ReadChannel mocks base method.
func (m *MockMessageQueueClient) ReadChannel(exchangeName, exchangeType, queue string) (<-chan amqp091.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadChannel", exchangeName, exchangeType, queue)
	ret0, _ := ret[0].(<-chan amqp091.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadChannel indicates an expected call of ReadChannel.
func (mr *MockMessageQueueClientMockRecorder) ReadChannel(exchangeName, exchangeType, queue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadChannel", reflect.TypeOf((*MockMessageQueueClient)(nil).ReadChannel), exchangeName, exchangeType, queue)
}

// Shutdown mocks base method.
func (m *MockMessageQueueClient) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockMessageQueueClientMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockMessageQueueClient)(nil).Shutdown))
}
