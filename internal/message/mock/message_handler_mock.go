// Code generated by MockGen. DO NOT EDIT.
// Source: internal/message/message_handler.go
//
// Generated by this command:
//
//	mockgen -source=internal/message/message_handler.go -destination=internal/message/mock/message_handler_mock.go
//

// Package mock_message is a generated GoMock package.
package mock_message

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// RegisterMessagesListener mocks base method.
func (m *MockMessageHandler) RegisterMessagesListener() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMessagesListener")
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMessagesListener indicates an expected call of RegisterMessagesListener.
func (mr *MockMessageHandlerMockRecorder) RegisterMessagesListener() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMessagesListener", reflect.TypeOf((*MockMessageHandler)(nil).RegisterMessagesListener))
}
