// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/account_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/account_service.go -destination=internal/service/mock/account_service_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	dto "order-service/internal/dto"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountService) GetAccount(userId, accountId int64) (dto.AccountDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", userId, accountId)
	ret0, _ := ret[0].(dto.AccountDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountServiceMockRecorder) GetAccount(userId, accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountService)(nil).GetAccount), userId, accountId)
}
