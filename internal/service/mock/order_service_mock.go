// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/order_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/order_service.go -destination=internal/service/mock/order_service_mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "order-service/internal/model"
	persistence "order-service/internal/persistence"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderService) Create(order model.Order) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", order)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderServiceMockRecorder) Create(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderService)(nil).Create), order)
}

// DeleteByBotId mocks base method.
func (m *MockOrderService) DeleteByBotId(botId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByBotId", botId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByBotId indicates an expected call of DeleteByBotId.
func (mr *MockOrderServiceMockRecorder) DeleteByBotId(botId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByBotId", reflect.TypeOf((*MockOrderService)(nil).DeleteByBotId), botId)
}

// GetByBotId mocks base method.
func (m *MockOrderService) GetByBotId(botId, page, size int) (persistence.Page[model.Order], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBotId", botId, page, size)
	ret0, _ := ret[0].(persistence.Page[model.Order])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBotId indicates an expected call of GetByBotId.
func (mr *MockOrderServiceMockRecorder) GetByBotId(botId, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBotId", reflect.TypeOf((*MockOrderService)(nil).GetByBotId), botId, page, size)
}
